
bin\Debug\AGV-Final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  000003f8  000004ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003f8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800202  00800202  000004ae  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  000004ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  000004b1  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004c4  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 00000098  00000000  00000000  00000508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00000dd8  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00000ca8  00000000  00000000  00001378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   000004fa  00000000  00000000  00002020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  00000094  00000000  00000000  0000251c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    00000531  00000000  00000000  000025b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 00000135  00000000  00000000  00002ae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2

000000f6 <.Loc.1>:
  f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
  f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
  fa:	e8 ef       	ldi	r30, 0xF8	; 248

000000fc <.Loc.4>:
  fc:	f3 e0       	ldi	r31, 0x03	; 3

000000fe <.Loc.5>:
  fe:	00 e0       	ldi	r16, 0x00	; 0

00000100 <.Loc.6>:
 100:	0b bf       	out	0x3b, r16	; 59

00000102 <.Loc.7>:
 102:	02 c0       	rjmp	.+4      	; 0x108 <.L__do_copy_data_start>

00000104 <.L__do_copy_data_loop>:
 104:	07 90       	elpm	r0, Z+

00000106 <.Loc.9>:
 106:	0d 92       	st	X+, r0

00000108 <.L__do_copy_data_start>:
 108:	a2 30       	cpi	r26, 0x02	; 2

0000010a <.Loc.11>:
 10a:	b1 07       	cpc	r27, r17

0000010c <.Loc.12>:
 10c:	d9 f7       	brne	.-10     	; 0x104 <.L__do_copy_data_loop>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2

00000110 <.Loc.1>:
 110:	a2 e0       	ldi	r26, 0x02	; 2

00000112 <.Loc.2>:
 112:	b2 e0       	ldi	r27, 0x02	; 2

00000114 <.Loc.3>:
 114:	01 c0       	rjmp	.+2      	; 0x118 <.Loc.5>

00000116 <.Loc.4>:
 116:	1d 92       	st	X+, r1

00000118 <.Loc.5>:
 118:	a4 30       	cpi	r26, 0x04	; 4

0000011a <.Loc.6>:
 11a:	b2 07       	cpc	r27, r18

0000011c <.Loc.7>:
 11c:	e1 f7       	brne	.-8      	; 0x116 <.Loc.4>

0000011e <L0^A>:
 11e:	0e 94 95 00 	call	0x12a	; 0x12a <main>
 122:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <main>:

int basissnelheid = 20000;                    // basissnelheid
int speed;                                   // past het prog aan

int main(void)
{
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62

00000132 <.Loc.1>:
    setupSteppers();                         // steppers initialiseren
 132:	0e 94 a7 00 	call	0x14e	; 0x14e <setupSteppers>

00000136 <.Loc.2>:
    speed = basissnelheid;
 136:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <basissnelheid>
 13a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <basissnelheid+0x1>
 13e:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <speed+0x1>
 142:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <speed>

00000146 <.L2>:

    while(1)
    {
 //       line();
        rijden();
 146:	0e 94 d7 01 	call	0x3ae	; 0x3ae <rijden>

0000014a <.LBE2>:
    {
 14a:	00 00       	nop
 14c:	fc cf       	rjmp	.-8      	; 0x146 <.L2>

0000014e <setupSteppers>:

    return 0;
}

int setupSteppers(void)
{
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	cd b7       	in	r28, 0x3d	; 61
 154:	de b7       	in	r29, 0x3e	; 62

00000156 <.Loc.6>:
    DDRL |= (1 << stepR);                  // PWM steppers aan
 156:	8a e0       	ldi	r24, 0x0A	; 10
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	fc 01       	movw	r30, r24
 15c:	20 81       	ld	r18, Z
 15e:	8a e0       	ldi	r24, 0x0A	; 10
 160:	91 e0       	ldi	r25, 0x01	; 1

00000162 <.Loc.7>:
 162:	28 60       	ori	r18, 0x08	; 8
 164:	fc 01       	movw	r30, r24
 166:	20 83       	st	Z, r18

00000168 <.Loc.8>:
    DDRB |= (1 << stepL);
 168:	84 e2       	ldi	r24, 0x24	; 36
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	fc 01       	movw	r30, r24
 16e:	20 81       	ld	r18, Z
 170:	84 e2       	ldi	r24, 0x24	; 36
 172:	90 e0       	ldi	r25, 0x00	; 0

00000174 <.Loc.9>:
 174:	20 62       	ori	r18, 0x20	; 32
 176:	fc 01       	movw	r30, r24
 178:	20 83       	st	Z, r18

0000017a <.Loc.10>:
    DDRE |= (1 << stop);
 17a:	8d e2       	ldi	r24, 0x2D	; 45
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	fc 01       	movw	r30, r24
 180:	20 81       	ld	r18, Z
 182:	8d e2       	ldi	r24, 0x2D	; 45
 184:	90 e0       	ldi	r25, 0x00	; 0

00000186 <.Loc.11>:
 186:	21 60       	ori	r18, 0x01	; 1
 188:	fc 01       	movw	r30, r24
 18a:	20 83       	st	Z, r18

0000018c <.Loc.12>:


    TCCR1A = (1 << COM1A1) | (0 << COM1A0) | (1 << WGM11) | (0 << WGM10);
 18c:	80 e8       	ldi	r24, 0x80	; 128
 18e:	90 e0       	ldi	r25, 0x00	; 0

00000190 <.Loc.13>:
 190:	22 e8       	ldi	r18, 0x82	; 130
 192:	fc 01       	movw	r30, r24
 194:	20 83       	st	Z, r18

00000196 <.Loc.14>:
    TCCR1B = (1 << WGM13) | (1 << WGM12) | (0 << CS12) | (0 << CS11) | (1 << CS10);
 196:	81 e8       	ldi	r24, 0x81	; 129
 198:	90 e0       	ldi	r25, 0x00	; 0

0000019a <.Loc.15>:
 19a:	29 e1       	ldi	r18, 0x19	; 25
 19c:	fc 01       	movw	r30, r24
 19e:	20 83       	st	Z, r18

000001a0 <.Loc.16>:

    TCCR5A = (1 << COM5A1) | (0 << COM5A0) | (1 << WGM51) | (0 << WGM50);
 1a0:	80 e2       	ldi	r24, 0x20	; 32
 1a2:	91 e0       	ldi	r25, 0x01	; 1

000001a4 <.Loc.17>:
 1a4:	22 e8       	ldi	r18, 0x82	; 130
 1a6:	fc 01       	movw	r30, r24
 1a8:	20 83       	st	Z, r18

000001aa <.Loc.18>:
    TCCR5B = (1 << WGM53) | (1 << WGM52) | (0 << CS52) | (0 << CS51) | (1 << CS50);
 1aa:	81 e2       	ldi	r24, 0x21	; 33
 1ac:	91 e0       	ldi	r25, 0x01	; 1

000001ae <.Loc.19>:
 1ae:	29 e1       	ldi	r18, 0x19	; 25
 1b0:	fc 01       	movw	r30, r24
 1b2:	20 83       	st	Z, r18

000001b4 <.Loc.20>:

    OCR1A = 2000;
 1b4:	88 e8       	ldi	r24, 0x88	; 136
 1b6:	90 e0       	ldi	r25, 0x00	; 0

000001b8 <.Loc.21>:
 1b8:	20 ed       	ldi	r18, 0xD0	; 208
 1ba:	37 e0       	ldi	r19, 0x07	; 7
 1bc:	fc 01       	movw	r30, r24
 1be:	31 83       	std	Z+1, r19	; 0x01
 1c0:	20 83       	st	Z, r18

000001c2 <.Loc.22>:
    OCR5A = 2000;
 1c2:	88 e2       	ldi	r24, 0x28	; 40
 1c4:	91 e0       	ldi	r25, 0x01	; 1

000001c6 <.Loc.23>:
 1c6:	20 ed       	ldi	r18, 0xD0	; 208
 1c8:	37 e0       	ldi	r19, 0x07	; 7
 1ca:	fc 01       	movw	r30, r24
 1cc:	31 83       	std	Z+1, r19	; 0x01
 1ce:	20 83       	st	Z, r18

000001d0 <.Loc.24>:
    ICR1 = 20000;			                       // 32000 is 5ms 16000 is 1ms
 1d0:	86 e8       	ldi	r24, 0x86	; 134
 1d2:	90 e0       	ldi	r25, 0x00	; 0

000001d4 <.Loc.25>:
 1d4:	20 e2       	ldi	r18, 0x20	; 32
 1d6:	3e e4       	ldi	r19, 0x4E	; 78
 1d8:	fc 01       	movw	r30, r24
 1da:	31 83       	std	Z+1, r19	; 0x01
 1dc:	20 83       	st	Z, r18

000001de <.Loc.26>:
    ICR5 = 20000;
 1de:	86 e2       	ldi	r24, 0x26	; 38
 1e0:	91 e0       	ldi	r25, 0x01	; 1

000001e2 <.Loc.27>:
 1e2:	20 e2       	ldi	r18, 0x20	; 32
 1e4:	3e e4       	ldi	r19, 0x4E	; 78
 1e6:	fc 01       	movw	r30, r24
 1e8:	31 83       	std	Z+1, r19	; 0x01
 1ea:	20 83       	st	Z, r18

000001ec <.Loc.28>:

    DDRG |= (1 << 2);                    // GND voor linesensor
 1ec:	83 e3       	ldi	r24, 0x33	; 51
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	fc 01       	movw	r30, r24
 1f2:	20 81       	ld	r18, Z
 1f4:	83 e3       	ldi	r24, 0x33	; 51
 1f6:	90 e0       	ldi	r25, 0x00	; 0

000001f8 <.Loc.29>:
 1f8:	24 60       	ori	r18, 0x04	; 4
 1fa:	fc 01       	movw	r30, r24
 1fc:	20 83       	st	Z, r18

000001fe <.Loc.30>:
    PORTG &= ~(1 << 2);                  // maakt port GND
 1fe:	84 e3       	ldi	r24, 0x34	; 52
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	fc 01       	movw	r30, r24
 204:	20 81       	ld	r18, Z

00000206 <.Loc.31>:
 206:	84 e3       	ldi	r24, 0x34	; 52
 208:	90 e0       	ldi	r25, 0x00	; 0

0000020a <.Loc.32>:
 20a:	2b 7f       	andi	r18, 0xFB	; 251
 20c:	fc 01       	movw	r30, r24
 20e:	20 83       	st	Z, r18

00000210 <.Loc.33>:
    DDRC &= ~(1 << 0) | ~(1 << 2) | ~(1 << 4) | ~(1 << 6);  // ingang sensor
 210:	27 e2       	ldi	r18, 0x27	; 39
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	87 e2       	ldi	r24, 0x27	; 39
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	f9 01       	movw	r30, r18
 21a:	20 81       	ld	r18, Z

0000021c <.Loc.34>:
 21c:	fc 01       	movw	r30, r24
 21e:	20 83       	st	Z, r18

00000220 <.Loc.35>:
    DDRA &= ~(1 << 7) | ~(1 << 5) | ~(1 << 3) | ~(1 << 1);  // same
 220:	21 e2       	ldi	r18, 0x21	; 33
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	81 e2       	ldi	r24, 0x21	; 33
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	f9 01       	movw	r30, r18
 22a:	20 81       	ld	r18, Z

0000022c <.Loc.36>:
 22c:	fc 01       	movw	r30, r24
 22e:	20 83       	st	Z, r18

00000230 <.Loc.37>:

}
 230:	00 00       	nop
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	08 95       	ret

00000238 <line>:

int line(void)
{
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	cd b7       	in	r28, 0x3d	; 61
 23e:	de b7       	in	r29, 0x3e	; 62

00000240 <.Loc.39>:

    if(PINC & (1 << 0))
 240:	86 e2       	ldi	r24, 0x26	; 38
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	fc 01       	movw	r30, r24
 246:	80 81       	ld	r24, Z

00000248 <.Loc.40>:
 248:	88 2f       	mov	r24, r24
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	81 70       	andi	r24, 0x01	; 1
 24e:	99 27       	eor	r25, r25

00000250 <.Loc.41>:
 250:	00 97       	sbiw	r24, 0x00	; 0
 252:	51 f0       	breq	.+20     	; 0x268 <.L5>

00000254 <.Loc.42>:
    {
        speed = speed + 100;
 254:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <speed>
 258:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <speed+0x1>
 25c:	8c 59       	subi	r24, 0x9C	; 156
 25e:	9f 4f       	sbci	r25, 0xFF	; 255

00000260 <.Loc.43>:
 260:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <speed+0x1>
 264:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <speed>

00000268 <.L5>:
    }
    if(PINC & (1 << 2))
 268:	86 e2       	ldi	r24, 0x26	; 38
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	fc 01       	movw	r30, r24
 26e:	80 81       	ld	r24, Z

00000270 <.Loc.45>:
 270:	88 2f       	mov	r24, r24
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	84 70       	andi	r24, 0x04	; 4
 276:	99 27       	eor	r25, r25

00000278 <.Loc.46>:
 278:	00 97       	sbiw	r24, 0x00	; 0
 27a:	49 f0       	breq	.+18     	; 0x28e <.L6>

0000027c <.Loc.47>:
    {
        speed = speed + 50;
 27c:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <speed>
 280:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <speed+0x1>
 284:	c2 96       	adiw	r24, 0x32	; 50

00000286 <.Loc.48>:
 286:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <speed+0x1>
 28a:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <speed>

0000028e <.L6>:
    }
    if(PINC & (1 << 4))
 28e:	86 e2       	ldi	r24, 0x26	; 38
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	fc 01       	movw	r30, r24
 294:	80 81       	ld	r24, Z

00000296 <.Loc.50>:
 296:	88 2f       	mov	r24, r24
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	80 71       	andi	r24, 0x10	; 16
 29c:	99 27       	eor	r25, r25

0000029e <.Loc.51>:
 29e:	00 97       	sbiw	r24, 0x00	; 0
 2a0:	49 f0       	breq	.+18     	; 0x2b4 <.L7>

000002a2 <.Loc.52>:
    {
        speed = speed + 10;
 2a2:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <speed>
 2a6:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <speed+0x1>
 2aa:	0a 96       	adiw	r24, 0x0a	; 10

000002ac <.Loc.53>:
 2ac:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <speed+0x1>
 2b0:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <speed>

000002b4 <.L7>:
    }
    if(PINC & (1 << 6))
 2b4:	86 e2       	ldi	r24, 0x26	; 38
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	fc 01       	movw	r30, r24
 2ba:	80 81       	ld	r24, Z

000002bc <.Loc.55>:
 2bc:	88 2f       	mov	r24, r24
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	80 74       	andi	r24, 0x40	; 64
 2c2:	99 27       	eor	r25, r25

000002c4 <.Loc.56>:
 2c4:	00 97       	sbiw	r24, 0x00	; 0
 2c6:	49 f0       	breq	.+18     	; 0x2da <.L8>

000002c8 <.Loc.57>:
    {
        speed = speed + 2;
 2c8:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <speed>
 2cc:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <speed+0x1>
 2d0:	02 96       	adiw	r24, 0x02	; 2

000002d2 <.Loc.58>:
 2d2:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <speed+0x1>
 2d6:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <speed>

000002da <.L8>:
    }
    if(PINA & (1 << 1))
 2da:	80 e2       	ldi	r24, 0x20	; 32
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	fc 01       	movw	r30, r24
 2e0:	80 81       	ld	r24, Z

000002e2 <.Loc.60>:
 2e2:	88 2f       	mov	r24, r24
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	82 70       	andi	r24, 0x02	; 2
 2e8:	99 27       	eor	r25, r25

000002ea <.Loc.61>:
 2ea:	00 97       	sbiw	r24, 0x00	; 0
 2ec:	51 f0       	breq	.+20     	; 0x302 <.L9>

000002ee <.Loc.62>:
    {
        speed = speed - 100;
 2ee:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <speed>
 2f2:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <speed+0x1>
 2f6:	84 56       	subi	r24, 0x64	; 100
 2f8:	91 09       	sbc	r25, r1

000002fa <.Loc.63>:
 2fa:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <speed+0x1>
 2fe:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <speed>

00000302 <.L9>:
    }
    if(PINA & (1 << 3))
 302:	80 e2       	ldi	r24, 0x20	; 32
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	fc 01       	movw	r30, r24
 308:	80 81       	ld	r24, Z

0000030a <.Loc.65>:
 30a:	88 2f       	mov	r24, r24
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	88 70       	andi	r24, 0x08	; 8
 310:	99 27       	eor	r25, r25

00000312 <.Loc.66>:
 312:	00 97       	sbiw	r24, 0x00	; 0
 314:	49 f0       	breq	.+18     	; 0x328 <.L10>

00000316 <.Loc.67>:
    {
        speed = speed - 50;
 316:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <speed>
 31a:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <speed+0x1>
 31e:	c2 97       	sbiw	r24, 0x32	; 50

00000320 <.Loc.68>:
 320:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <speed+0x1>
 324:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <speed>

00000328 <.L10>:
    }
    if(PINA & (1 << 5))
 328:	80 e2       	ldi	r24, 0x20	; 32
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	fc 01       	movw	r30, r24
 32e:	80 81       	ld	r24, Z

00000330 <.Loc.70>:
 330:	88 2f       	mov	r24, r24
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	80 72       	andi	r24, 0x20	; 32
 336:	99 27       	eor	r25, r25

00000338 <.Loc.71>:
 338:	00 97       	sbiw	r24, 0x00	; 0
 33a:	49 f0       	breq	.+18     	; 0x34e <.L11>

0000033c <.Loc.72>:
    {
        speed = speed - 10;
 33c:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <speed>
 340:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <speed+0x1>
 344:	0a 97       	sbiw	r24, 0x0a	; 10

00000346 <.Loc.73>:
 346:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <speed+0x1>
 34a:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <speed>

0000034e <.L11>:
    }
    if(PINA & (1 << 7))
 34e:	80 e2       	ldi	r24, 0x20	; 32
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	fc 01       	movw	r30, r24
 354:	80 81       	ld	r24, Z

00000356 <.Loc.75>:
 356:	88 23       	and	r24, r24
 358:	4c f4       	brge	.+18     	; 0x36c <.L12>

0000035a <.Loc.76>:
    {
        speed = speed - 2;
 35a:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <speed>
 35e:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <speed+0x1>
 362:	02 97       	sbiw	r24, 0x02	; 2

00000364 <.Loc.77>:
 364:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <speed+0x1>
 368:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <speed>

0000036c <.L12>:
    }
    if((PINC & (1 << 6)) & (PINA & (1 << 7)))
 36c:	86 e2       	ldi	r24, 0x26	; 38
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	fc 01       	movw	r30, r24
 372:	80 81       	ld	r24, Z

00000374 <.Loc.79>:
 374:	88 2f       	mov	r24, r24
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	9c 01       	movw	r18, r24
 37a:	20 74       	andi	r18, 0x40	; 64
 37c:	33 27       	eor	r19, r19

0000037e <.Loc.80>:
 37e:	80 e2       	ldi	r24, 0x20	; 32
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	fc 01       	movw	r30, r24
 384:	80 81       	ld	r24, Z

00000386 <.Loc.81>:
 386:	88 2f       	mov	r24, r24
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	80 78       	andi	r24, 0x80	; 128
 38c:	99 27       	eor	r25, r25

0000038e <.Loc.82>:
 38e:	82 23       	and	r24, r18
 390:	93 23       	and	r25, r19

00000392 <.Loc.83>:
 392:	00 97       	sbiw	r24, 0x00	; 0
 394:	41 f0       	breq	.+16     	; 0x3a6 <.L13>

00000396 <.Loc.84>:
    {
        speed = basissnelheid;
 396:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <basissnelheid>
 39a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <basissnelheid+0x1>
 39e:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <speed+0x1>
 3a2:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <speed>

000003a6 <.L13>:
    }
}
 3a6:	00 00       	nop
 3a8:	df 91       	pop	r29
 3aa:	cf 91       	pop	r28
 3ac:	08 95       	ret

000003ae <rijden>:

void rijden(void)
{
 3ae:	cf 93       	push	r28
 3b0:	df 93       	push	r29
 3b2:	cd b7       	in	r28, 0x3d	; 61
 3b4:	de b7       	in	r29, 0x3e	; 62

000003b6 <.Loc.87>:
    ICR1 = speed;                               // stel snelheid motor in
 3b6:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <speed>
 3ba:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <speed+0x1>

000003be <.Loc.88>:
 3be:	86 e8       	ldi	r24, 0x86	; 134
 3c0:	90 e0       	ldi	r25, 0x00	; 0

000003c2 <.Loc.89>:
 3c2:	fc 01       	movw	r30, r24
 3c4:	31 83       	std	Z+1, r19	; 0x01
 3c6:	20 83       	st	Z, r18

000003c8 <.Loc.90>:
    ICR5 = (basissnelheid*2) - speed;           // doet tegenovergestelde van ICR1
 3c8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <basissnelheid>
 3cc:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <basissnelheid+0x1>
 3d0:	9c 01       	movw	r18, r24
 3d2:	22 0f       	add	r18, r18
 3d4:	33 1f       	adc	r19, r19

000003d6 <.Loc.91>:
 3d6:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <speed>
 3da:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <speed+0x1>
 3de:	28 1b       	sub	r18, r24
 3e0:	39 0b       	sbc	r19, r25

000003e2 <.Loc.92>:
 3e2:	86 e2       	ldi	r24, 0x26	; 38
 3e4:	91 e0       	ldi	r25, 0x01	; 1

000003e6 <.Loc.93>:
 3e6:	fc 01       	movw	r30, r24
 3e8:	31 83       	std	Z+1, r19	; 0x01
 3ea:	20 83       	st	Z, r18

000003ec <.Loc.94>:
}
 3ec:	00 00       	nop
 3ee:	df 91       	pop	r29
 3f0:	cf 91       	pop	r28
 3f2:	08 95       	ret

000003f4 <_exit>:
 3f4:	f8 94       	cli

000003f6 <__stop_program>:
 3f6:	ff cf       	rjmp	.-2      	; 0x3f6 <__stop_program>
